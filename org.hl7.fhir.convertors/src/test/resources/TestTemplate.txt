package org.hl7.fhir.convertors.conv%1$s;

import org.hl7.fhir.convertors.testgenerator.basetests.BaseTest%1$s;
import org.hl7.fhir.convertors.testgenerator.utils.ResourceUtils;
import org.hl7.fhir.convertors.testgenerator.utils.ResourceVersion;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.File;
import java.io.IOException;

/**
 * %1$s - conversion code ie "10_40"
 * %2$s - resource name ie "Patient"
 * %3$s - low fhir version ie "dstu3"
 * %4$s - high fhir version ie "r5"
 **/
class %2$s%1$sTest extends BaseTest%1$s {

    protected final static String CLASS_NAME = "%2$s";
    protected final static ResourceVersion HIGH_FHIR_VERSION = ResourceVersion.fromCode("%3$s");
    protected final static ResourceVersion LOW_FHIR_VERSION = ResourceVersion.fromCode("%4$s");

    @ParameterizedTest(name = "{index} :: {0}")
    @DisplayName("Conversion from %3$s -> %4$s -> %3$s")
    @MethodSource("dataSourceLow")
    void testConvertFromLowToHigh(String filename, File testFile) throws IOException {
        String beforeJsonString = ResourceUtils.loadStringFromResourceFile(testFile);
        org.hl7.fhir.%3$s.formats.JsonParser parser = new org.hl7.fhir.%3$s.formats.JsonParser();
        org.hl7.fhir.%3$s.model.Resource parsedResource = parser.parse(beforeJsonString);
        org.hl7.fhir.%3$s.model.Resource convertedResource = roundTrip(parsedResource);
        String afterJsonString = parser.composeString(convertedResource);
        displayDifference(beforeJsonString, afterJsonString);
        Assertions.fail();
    }

    @ParameterizedTest(name = "{index} :: {0}")
    @DisplayName("Conversion from %4$s -> %3$s -> %4$s")
    @MethodSource("dataSourceHigh")
    void testConvertFromHighToLow(String filename, File testFile) throws IOException {
        String beforeJsonString = ResourceUtils.loadStringFromResourceFile(testFile);
        org.hl7.fhir.%4$s.formats.JsonParser parser = new org.hl7.fhir.%4$s.formats.JsonParser();
        org.hl7.fhir.%4$s.model.Resource parsedResource = parser.parse(beforeJsonString);
        org.hl7.fhir.%4$s.model.Resource convertedResource = roundTrip(parsedResource);
        String afterJsonString = parser.composeString(convertedResource);
        displayDifference(beforeJsonString, afterJsonString);
        Assertions.fail();
    }

    @Override
    protected String getClassName() {
        return CLASS_NAME;
    }

    @Override
    protected ResourceVersion getLowFhirVersion() {
        return LOW_FHIR_VERSION;
    }

    @Override
    protected ResourceVersion getHighFhirVersion() {
        return HIGH_FHIR_VERSION;
    }
}