package org.hl7.fhir.android.generated.dstu2;

// Generated on Wed, Jul 13, 2016 05:32+1000 for FHIR v1.0.2
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.hl7.fhir.android.generated.dstu2.EnumerationsEnum.ConformanceResourceStatus;
import org.hl7.fhir.android.generated.dstu2.EnumerationsEnum.ConformanceResourceStatusEnumFactory;
import org.hl7.fhir.instance.model.api.IBaseBackboneElement;
import org.hl7.fhir.exceptions.FHIRException;
import org.hl7.fhir.utilities.Utilities;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuidePageKindEnumFactory;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuidePageKind;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuideDependencyTypeEnumFactory;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuideDependencyType;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuideResourcePurposeEnumFactory;
import org.hl7.fhir.android.generated.dstu2.ImplementationGuideEnum.GuideResourcePurpose;

public class ImplementationGuidePageComponent extends BackboneElement implements IBaseBackboneElement {

    /**
     * The source address for the page.
     */
    protected UriType source;

    /**
     * A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    protected StringType name;

    /**
     * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
     */
    protected Enumeration<GuidePageKind> kind;

    /**
     * For constructed pages, what kind of resources to include in the list.
     */
    protected List<CodeType> type;

    /**
     * For constructed pages, a list of packages to include in the page (or else empty for everything).
     */
    protected List<StringType> package_;

    /**
     * The format of the page.
     */
    protected CodeType format;

    /**
     * Nested Pages/Sections under this page.
     */
    protected List<ImplementationGuidePageComponent> page;

    private static final long serialVersionUID = -1620890043L;

    /*
     * Constructor
     */
    public ImplementationGuidePageComponent() {
        super();
    }

    /*
     * Constructor
     */
    public ImplementationGuidePageComponent(UriType source, StringType name, Enumeration<GuidePageKind> kind) {
        super();
        this.source = source;
        this.name = name;
        this.kind = kind;
    }

    /**
     * @return {@link #source} (The source address for the page.). This is the underlying object with id, value and extensions. The accessor "getSource" gives direct access to the value
     */
    public UriType getSourceElement() {
        if (this.source == null)
            if (Configuration.errorOnAutoCreate())
                throw new Error("Attempt to auto-create ImplementationGuidePageComponent.source");
            else if (Configuration.doAutoCreate())
                // bb
                this.source = new UriType();
        return this.source;
    }

    public boolean hasSourceElement() {
        return this.source != null && !this.source.isEmpty();
    }

    public boolean hasSource() {
        return this.source != null && !this.source.isEmpty();
    }

    /**
     * @param value {@link #source} (The source address for the page.). This is the underlying object with id, value and extensions. The accessor "getSource" gives direct access to the value
     */
    public ImplementationGuidePageComponent setSourceElement(UriType value) {
        this.source = value;
        return this;
    }

    /**
     * @return The source address for the page.
     */
    public String getSource() {
        return this.source == null ? null : this.source.getValue();
    }

    /**
     * @param value The source address for the page.
     */
    public ImplementationGuidePageComponent setSource(String value) {
        if (this.source == null)
            this.source = new UriType();
        this.source.setValue(value);
        return this;
    }

    /**
     * @return {@link #name} (A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.). This is the underlying object with id, value and extensions. The accessor "getName" gives direct access to the value
     */
    public StringType getNameElement() {
        if (this.name == null)
            if (Configuration.errorOnAutoCreate())
                throw new Error("Attempt to auto-create ImplementationGuidePageComponent.name");
            else if (Configuration.doAutoCreate())
                // bb
                this.name = new StringType();
        return this.name;
    }

    public boolean hasNameElement() {
        return this.name != null && !this.name.isEmpty();
    }

    public boolean hasName() {
        return this.name != null && !this.name.isEmpty();
    }

    /**
     * @param value {@link #name} (A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.). This is the underlying object with id, value and extensions. The accessor "getName" gives direct access to the value
     */
    public ImplementationGuidePageComponent setNameElement(StringType value) {
        this.name = value;
        return this;
    }

    /**
     * @return A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    public String getName() {
        return this.name == null ? null : this.name.getValue();
    }

    /**
     * @param value A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    public ImplementationGuidePageComponent setName(String value) {
        if (this.name == null)
            this.name = new StringType();
        this.name.setValue(value);
        return this;
    }

    /**
     * @return {@link #kind} (The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.). This is the underlying object with id, value and extensions. The accessor "getKind" gives direct access to the value
     */
    public Enumeration<GuidePageKind> getKindElement() {
        if (this.kind == null)
            if (Configuration.errorOnAutoCreate())
                throw new Error("Attempt to auto-create ImplementationGuidePageComponent.kind");
            else if (Configuration.doAutoCreate())
                // bb
                this.kind = new Enumeration<GuidePageKind>(new GuidePageKindEnumFactory());
        return this.kind;
    }

    public boolean hasKindElement() {
        return this.kind != null && !this.kind.isEmpty();
    }

    public boolean hasKind() {
        return this.kind != null && !this.kind.isEmpty();
    }

    /**
     * @param value {@link #kind} (The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.). This is the underlying object with id, value and extensions. The accessor "getKind" gives direct access to the value
     */
    public ImplementationGuidePageComponent setKindElement(Enumeration<GuidePageKind> value) {
        this.kind = value;
        return this;
    }

    /**
     * @return The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
     */
    public GuidePageKind getKind() {
        return this.kind == null ? null : this.kind.getValue();
    }

    /**
     * @param value The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
     */
    public ImplementationGuidePageComponent setKind(GuidePageKind value) {
        if (this.kind == null)
            this.kind = new Enumeration<GuidePageKind>(new GuidePageKindEnumFactory());
        this.kind.setValue(value);
        return this;
    }

    /**
     * @return {@link #type} (For constructed pages, what kind of resources to include in the list.)
     */
    public List<CodeType> getType() {
        if (this.type == null)
            this.type = new ArrayList<CodeType>();
        return this.type;
    }

    public boolean hasType() {
        if (this.type == null)
            return false;
        for (CodeType item : this.type) if (!item.isEmpty())
            return true;
        return false;
    }

    // syntactic sugar
    public CodeType addTypeElement() {
        // 2
        CodeType t = new CodeType();
        if (this.type == null)
            this.type = new ArrayList<CodeType>();
        this.type.add(t);
        return t;
    }

    /**
     * @param value {@link #type} (For constructed pages, what kind of resources to include in the list.)
     */
    public ImplementationGuidePageComponent addType(String value) {
        // 1
        CodeType t = new CodeType();
        t.setValue(value);
        if (this.type == null)
            this.type = new ArrayList<CodeType>();
        this.type.add(t);
        return this;
    }

    /**
     * @param value {@link #type} (For constructed pages, what kind of resources to include in the list.)
     */
    public boolean hasType(String value) {
        if (this.type == null)
            return false;
        for (CodeType v : this.type) if (// code
        v.equals(value))
            return true;
        return false;
    }

    /**
     * @return {@link #package_} (For constructed pages, a list of packages to include in the page (or else empty for everything).)
     */
    public List<StringType> getPackage() {
        if (this.package_ == null)
            this.package_ = new ArrayList<StringType>();
        return this.package_;
    }

    public boolean hasPackage() {
        if (this.package_ == null)
            return false;
        for (StringType item : this.package_) if (!item.isEmpty())
            return true;
        return false;
    }

    // syntactic sugar
    public StringType addPackageElement() {
        // 2
        StringType t = new StringType();
        if (this.package_ == null)
            this.package_ = new ArrayList<StringType>();
        this.package_.add(t);
        return t;
    }

    /**
     * @param value {@link #package_} (For constructed pages, a list of packages to include in the page (or else empty for everything).)
     */
    public ImplementationGuidePageComponent addPackage(String value) {
        // 1
        StringType t = new StringType();
        t.setValue(value);
        if (this.package_ == null)
            this.package_ = new ArrayList<StringType>();
        this.package_.add(t);
        return this;
    }

    /**
     * @param value {@link #package_} (For constructed pages, a list of packages to include in the page (or else empty for everything).)
     */
    public boolean hasPackage(String value) {
        if (this.package_ == null)
            return false;
        for (StringType v : this.package_) if (// string
        v.equals(value))
            return true;
        return false;
    }

    /**
     * @return {@link #format} (The format of the page.). This is the underlying object with id, value and extensions. The accessor "getFormat" gives direct access to the value
     */
    public CodeType getFormatElement() {
        if (this.format == null)
            if (Configuration.errorOnAutoCreate())
                throw new Error("Attempt to auto-create ImplementationGuidePageComponent.format");
            else if (Configuration.doAutoCreate())
                // bb
                this.format = new CodeType();
        return this.format;
    }

    public boolean hasFormatElement() {
        return this.format != null && !this.format.isEmpty();
    }

    public boolean hasFormat() {
        return this.format != null && !this.format.isEmpty();
    }

    /**
     * @param value {@link #format} (The format of the page.). This is the underlying object with id, value and extensions. The accessor "getFormat" gives direct access to the value
     */
    public ImplementationGuidePageComponent setFormatElement(CodeType value) {
        this.format = value;
        return this;
    }

    /**
     * @return The format of the page.
     */
    public String getFormat() {
        return this.format == null ? null : this.format.getValue();
    }

    /**
     * @param value The format of the page.
     */
    public ImplementationGuidePageComponent setFormat(String value) {
        if (Utilities.noString(value))
            this.format = null;
        else {
            if (this.format == null)
                this.format = new CodeType();
            this.format.setValue(value);
        }
        return this;
    }

    /**
     * @return {@link #page} (Nested Pages/Sections under this page.)
     */
    public List<ImplementationGuidePageComponent> getPage() {
        if (this.page == null)
            this.page = new ArrayList<ImplementationGuidePageComponent>();
        return this.page;
    }

    public boolean hasPage() {
        if (this.page == null)
            return false;
        for (ImplementationGuidePageComponent item : this.page) if (!item.isEmpty())
            return true;
        return false;
    }

    // syntactic sugar
    public ImplementationGuidePageComponent addPage() {
        // 3
        ImplementationGuidePageComponent t = new ImplementationGuidePageComponent();
        if (this.page == null)
            this.page = new ArrayList<ImplementationGuidePageComponent>();
        this.page.add(t);
        return t;
    }

    // syntactic sugar
    public ImplementationGuidePageComponent addPage(ImplementationGuidePageComponent t) {
        // 3
        if (t == null)
            return this;
        if (this.page == null)
            this.page = new ArrayList<ImplementationGuidePageComponent>();
        this.page.add(t);
        return this;
    }

    protected void listChildren(List<Property> childrenList) {
        super.listChildren(childrenList);
        childrenList.add(new Property("source", "uri", "The source address for the page.", 0, java.lang.Integer.MAX_VALUE, source));
        childrenList.add(new Property("name", "string", "A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.", 0, java.lang.Integer.MAX_VALUE, name));
        childrenList.add(new Property("kind", "code", "The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.", 0, java.lang.Integer.MAX_VALUE, kind));
        childrenList.add(new Property("type", "code", "For constructed pages, what kind of resources to include in the list.", 0, java.lang.Integer.MAX_VALUE, type));
        childrenList.add(new Property("package", "string", "For constructed pages, a list of packages to include in the page (or else empty for everything).", 0, java.lang.Integer.MAX_VALUE, package_));
        childrenList.add(new Property("format", "code", "The format of the page.", 0, java.lang.Integer.MAX_VALUE, format));
        childrenList.add(new Property("page", "@ImplementationGuide.page", "Nested Pages/Sections under this page.", 0, java.lang.Integer.MAX_VALUE, page));
    }

    public void setProperty(String name, Base value) throws FHIRException {
        if (name.equals("source"))
            // UriType
            this.source = castToUri(value);
        else if (name.equals("name"))
            // StringType
            this.name = castToString(value);
        else if (name.equals("kind"))
            // Enumeration<GuidePageKind>
            this.kind = new GuidePageKindEnumFactory().fromType(value);
        else if (name.equals("type"))
            this.getType().add(castToCode(value));
        else if (name.equals("package"))
            this.getPackage().add(castToString(value));
        else if (name.equals("format"))
            // CodeType
            this.format = castToCode(value);
        else if (name.equals("page"))
            this.getPage().add((ImplementationGuidePageComponent) value);
        else
            super.setProperty(name, value);
    }

    public Base addChild(String name) throws FHIRException {
        if (name.equals("source")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.source");
        } else if (name.equals("name")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.name");
        } else if (name.equals("kind")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.kind");
        } else if (name.equals("type")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.type");
        } else if (name.equals("package")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.package");
        } else if (name.equals("format")) {
            throw new FHIRException("Cannot call addChild on a primitive type ImplementationGuide.format");
        } else if (name.equals("page")) {
            return addPage();
        } else
            return super.addChild(name);
    }

    public ImplementationGuidePageComponent copy() {
        ImplementationGuidePageComponent dst = new ImplementationGuidePageComponent();
        copyValues(dst);
        dst.source = source == null ? null : source.copy();
        dst.name = name == null ? null : name.copy();
        dst.kind = kind == null ? null : kind.copy();
        if (type != null) {
            dst.type = new ArrayList<CodeType>();
            for (CodeType i : type) dst.type.add(i.copy());
        }
        ;
        if (package_ != null) {
            dst.package_ = new ArrayList<StringType>();
            for (StringType i : package_) dst.package_.add(i.copy());
        }
        ;
        dst.format = format == null ? null : format.copy();
        if (page != null) {
            dst.page = new ArrayList<ImplementationGuidePageComponent>();
            for (ImplementationGuidePageComponent i : page) dst.page.add(i.copy());
        }
        ;
        return dst;
    }

    public boolean equalsDeep(Base other) {
        if (!super.equalsDeep(other))
            return false;
        if (!(other instanceof ImplementationGuidePageComponent))
            return false;
        ImplementationGuidePageComponent o = (ImplementationGuidePageComponent) other;
        return compareDeep(source, o.source, true) && compareDeep(name, o.name, true) && compareDeep(kind, o.kind, true) && compareDeep(type, o.type, true) && compareDeep(package_, o.package_, true) && compareDeep(format, o.format, true) && compareDeep(page, o.page, true);
    }

    public boolean equalsShallow(Base other) {
        if (!super.equalsShallow(other))
            return false;
        if (!(other instanceof ImplementationGuidePageComponent))
            return false;
        ImplementationGuidePageComponent o = (ImplementationGuidePageComponent) other;
        return compareValues(source, o.source, true) && compareValues(name, o.name, true) && compareValues(kind, o.kind, true) && compareValues(type, o.type, true) && compareValues(package_, o.package_, true) && compareValues(format, o.format, true);
    }

    public boolean isEmpty() {
        return super.isEmpty() && (source == null || source.isEmpty()) && (name == null || name.isEmpty()) && (kind == null || kind.isEmpty()) && (type == null || type.isEmpty()) && (package_ == null || package_.isEmpty()) && (format == null || format.isEmpty()) && (page == null || page.isEmpty());
    }

    public String fhirType() {
        return "ImplementationGuide.page";
    }
}
